package com.example.superligasparta.service.impl;

import com.example.superligasparta.domain.entity.Match;
import com.example.superligasparta.domain.entity.Team;
import com.example.superligasparta.domain.entity.TournamentTeamInfo;
import com.example.superligasparta.domain.repository.MatchRepository;
import com.example.superligasparta.domain.repository.TeamRepository;
import com.example.superligasparta.domain.repository.TournamentRepository;
import com.example.superligasparta.domain.repository.TournamentTeamInfoRepository;
import com.example.superligasparta.model.LeagueTableRow;
import com.example.superligasparta.service.LeagueService;
import com.example.superligasparta.util.LeagueTableRowBuilder;
import jakarta.persistence.EntityNotFoundException;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.*;

@Service
@RequiredArgsConstructor
public class LeagueServiceImpl implements LeagueService {

  private final MatchRepository matchRepository;
  private final TournamentTeamInfoRepository tournamentTeamInfoRepository;
  private final TournamentRepository tournamentRepository;

  @Override
  public List<LeagueTableRow> getLeagueTable(Long tournamentId) {
    // üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞
    if (!tournamentRepository.existsById(tournamentId)) {
      throw new EntityNotFoundException("–¢—É—Ä–Ω–∏—Ä —Å ID " + tournamentId + " –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }

    // 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—ã–≥—Ä–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∏ —Ç—É—Ä–Ω–∏—Ä–∞
    List<Match> matches = matchRepository.findAllByTournamentIdAndPlayedTrue(tournamentId);

    // 2. –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—ã —ç—Ç–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ tournament_team_info
    List<TournamentTeamInfo> tournamentTeams = tournamentTeamInfoRepository.findByTournamentId(tournamentId);

    // 3. –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞–ø—É –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
    Map<Long, LeagueTableRowBuilder> rows = new HashMap<>();
    for (TournamentTeamInfo info : tournamentTeams) {
      rows.put(info.getTeamId(), new LeagueTableRowBuilder(info.getTeamId(), info.getDisplayName()));
    }

    // 4. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞—Ç—á–∏
    for (Match match : matches) {
      LeagueTableRowBuilder home = rows.get(match.getHomeTeamId());
      LeagueTableRowBuilder away = rows.get(match.getAwayTeamId());

      if (home != null) home.addMatch(match.getHomeGoals(), match.getAwayGoals());
      if (away != null) away.addMatch(match.getAwayGoals(), match.getHomeGoals());
    }

    // 5. –°–æ–±–∏—Ä–∞–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    List<LeagueTableRow> result = rows.values().stream()
        .map(LeagueTableRowBuilder::build)
        .toList();
    Comparator<LeagueTableRow> leagueTableComparator = Comparator
        .<LeagueTableRow>comparingInt(row -> row.points() * -1) // –ø–æ —É–±—ã–≤–∞–Ω–∏—é –æ—á–∫–æ–≤
        .thenComparingInt(row -> row.goalDifference() * -1)     // –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Ä–∞–∑–Ω–∏—Ü—ã –º—è—á–µ–π
        .thenComparingInt(row -> row.goalsFor() * -1)           // –ø–æ —É–±—ã–≤–∞–Ω–∏—é –≥–æ–ª–æ–≤
        .thenComparing(LeagueTableRow::teamName);               // –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É (–ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é)
    return result.stream()
        .sorted(leagueTableComparator)
        .toList();
  }
}
